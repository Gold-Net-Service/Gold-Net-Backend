spring:
  profiles:
    active: local # 기본 active profile 설정

---
spring:
  config:
    activate:
      on-profile: local

  datasource:
    url: ${LOCAL_MYSQL_URL}
    username: ${LOCAL_MYSQL_USER}
    password: ${LOCAL_MYSQL_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  sql:
    init:
      mode: always
  jpa:
    hibernate:
      # 데이터베이스의 스키마와 jpa 엔티티가 불일치할때 애플리케이션 실행 중단
      ddl-auto: validate
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        show-sql: true
  flyway:
    enabled: true
    baseline-on-migrate: true
    #마이그레이션 파일 경로
    locations: classpath:db/migration


openai:
  api:
    key: ${OPENAI_API_KEY}
    url: ${OPENAI_API_URL}
  model: ${OPENAI_API_MODEL}

  ai:
    openai:
      # 1단계에서 발급받은 API 키를 여기에 붙여넣으세요.
      api-key: ${OPENAI_API_KEY}
      chat:
        options:
          # gpt-4o는 성능과 비용 면에서 매우 효율적인 최신 모델입니다.
          model: gpt-4o
          # temperature: 0.2  # 0에 가까울수록 일관성 있는 답변, 1에 가까울수록 창의적인 답변
---
spring:
  config:
    activate:
      on-profile: prod

  datasource:
    url: ${MYSQL_URL}
    username: ${MYSQL_USER}
    password: ${MYSQL_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  sql:
    init:
      mode: never
  jpa:
    hibernate:
      # 데이터베이스의 스키마와 jpa 엔티티가 불일치할때 애플리케이션 실행 중단
      ddl-auto: validate
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        show-sql: true
  flyway:
    enabled: true
    baseline-on-migrate: true
    #마이그레이션 파일 경로
    locations: classpath:db/migration

#
#openai:
#  api:
#    key: ${OPENAI_API_KEY}
#    url: ${OPENAI_API_URL}
#  model: ${OPENAI_API_MODEL}
